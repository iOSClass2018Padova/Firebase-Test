//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.file` struct is generated, and contains static references to 2 files.
  struct file {
    /// Resource file `GoogleService-Info.plist`.
    static let googleServiceInfoPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "GoogleService-Info", pathExtension: "plist")
    /// Resource file `Xcode.gitignore`.
    static let xcodeGitignore = Rswift.FileResource(bundle: R.hostingBundle, name: "Xcode", pathExtension: "gitignore")
    
    /// `bundle.url(forResource: "GoogleService-Info", withExtension: "plist")`
    static func googleServiceInfoPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.googleServiceInfoPlist
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "Xcode", withExtension: "gitignore")`
    static func xcodeGitignore(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.xcodeGitignore
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 3 view controllers.
  struct segue {
    /// This struct is generated for `LoadingInfoController`, and contains static references to 2 segues.
    struct loadingInfoController {
      /// Segue identifier `segueToLogin`.
      static let segueToLogin: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, LoadingInfoController, SignUpController> = Rswift.StoryboardSegueIdentifier(identifier: "segueToLogin")
      /// Segue identifier `segueToMain`.
      static let segueToMain: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, LoadingInfoController, UIKit.UINavigationController> = Rswift.StoryboardSegueIdentifier(identifier: "segueToMain")
      
      /// Optionally returns a typed version of segue `segueToLogin`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func segueToLogin(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, LoadingInfoController, SignUpController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.loadingInfoController.segueToLogin, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `segueToMain`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func segueToMain(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, LoadingInfoController, UIKit.UINavigationController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.loadingInfoController.segueToMain, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `LoginController`, and contains static references to 1 segues.
    struct loginController {
      /// Segue identifier `segueToMain`.
      static let segueToMain: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, LoginController, UIKit.UINavigationController> = Rswift.StoryboardSegueIdentifier(identifier: "segueToMain")
      
      /// Optionally returns a typed version of segue `segueToMain`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func segueToMain(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, LoginController, UIKit.UINavigationController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.loginController.segueToMain, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `SignUpController`, and contains static references to 1 segues.
    struct signUpController {
      /// Segue identifier `segueToMain`.
      static let segueToMain: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, SignUpController, UIKit.UINavigationController> = Rswift.StoryboardSegueIdentifier(identifier: "segueToMain")
      
      /// Optionally returns a typed version of segue `segueToMain`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func segueToMain(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, SignUpController, UIKit.UINavigationController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.signUpController.segueToMain, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 4 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `LoadingInfo`.
    static let loadingInfo = _R.storyboard.loadingInfo()
    /// Storyboard `Login`.
    static let login = _R.storyboard.login()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "LoadingInfo", bundle: ...)`
    static func loadingInfo(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.loadingInfo)
    }
    
    /// `UIStoryboard(name: "Login", bundle: ...)`
    static func login(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.login)
    }
    
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 2 localization tables.
  struct string {
    /// This `R.string.launchScreen` struct is generated, and contains static references to 0 localization keys.
    struct launchScreen {
      fileprivate init() {}
    }
    
    /// This `R.string.localizable` struct is generated, and contains static references to 21 localization keys.
    struct localizable {
      /// en translation: Already signed? Login
      /// 
      /// Locales: en, it
      static let kSignupGoToLogin = Rswift.StringResource(key: "kSignupGoToLogin", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "it"], comment: nil)
      /// en translation: Create your account
      /// 
      /// Locales: en, it
      static let kLoginGoToSignup = Rswift.StringResource(key: "kLoginGoToSignup", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "it"], comment: nil)
      /// en translation: Different passwords
      /// 
      /// Locales: en, it
      static let kAlertLoginFailedDifferentPasswordsTitle = Rswift.StringResource(key: "kAlertLoginFailedDifferentPasswordsTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "it"], comment: nil)
      /// en translation: Email
      /// 
      /// Locales: en, it
      static let kLoginEmail = Rswift.StringResource(key: "kLoginEmail", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "it"], comment: nil)
      /// en translation: Empty fields
      /// 
      /// Locales: en, it
      static let kAlertLoginFailedEmptyLabelsTitle = Rswift.StringResource(key: "kAlertLoginFailedEmptyLabelsTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "it"], comment: nil)
      /// en translation: Error
      /// 
      /// Locales: en, it
      static let kErorr = Rswift.StringResource(key: "kErorr", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "it"], comment: nil)
      /// en translation: Invalid mail
      /// 
      /// Locales: en, it
      static let kAlertLoginFailedInvalidEmailTitle = Rswift.StringResource(key: "kAlertLoginFailedInvalidEmailTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "it"], comment: nil)
      /// en translation: Invalid password
      /// 
      /// Locales: en, it
      static let kAlertLoginFailedInvalidPasswordTitle = Rswift.StringResource(key: "kAlertLoginFailedInvalidPasswordTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "it"], comment: nil)
      /// en translation: Login
      /// 
      /// Locales: en, it
      static let kLoginButton = Rswift.StringResource(key: "kLoginButton", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "it"], comment: nil)
      /// en translation: Login
      /// 
      /// Locales: en, it
      static let kLoginTitle = Rswift.StringResource(key: "kLoginTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "it"], comment: nil)
      /// en translation: Ok
      /// 
      /// Locales: en, it
      static let kAlertOkButton = Rswift.StringResource(key: "kAlertOkButton", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "it"], comment: nil)
      /// en translation: Oppsss
      /// 
      /// Locales: en, it
      static let kUserLoggedFailTitle = Rswift.StringResource(key: "kUserLoggedFailTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "it"], comment: nil)
      /// en translation: Password
      /// 
      /// Locales: en, it
      static let kLoginPassword = Rswift.StringResource(key: "kLoginPassword", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "it"], comment: nil)
      /// en translation: Password must be six characters long
      /// 
      /// Locales: en, it
      static let kAlertLoginFailedInvalidPasswordMessage = Rswift.StringResource(key: "kAlertLoginFailedInvalidPasswordMessage", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "it"], comment: nil)
      /// en translation: Repeat password
      /// 
      /// Locales: en, it
      static let kSignupRepeatPassword = Rswift.StringResource(key: "kSignupRepeatPassword", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "it"], comment: nil)
      /// en translation: Signup
      /// 
      /// Locales: en, it
      static let kSignupButton = Rswift.StringResource(key: "kSignupButton", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "it"], comment: nil)
      /// en translation: Signup
      /// 
      /// Locales: en, it
      static let kSignupTitle = Rswift.StringResource(key: "kSignupTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "it"], comment: nil)
      /// en translation: The confirmation password is different
      /// 
      /// Locales: en, it
      static let kAlertLoginFailedDifferentPasswordsMessage = Rswift.StringResource(key: "kAlertLoginFailedDifferentPasswordsMessage", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "it"], comment: nil)
      /// en translation: The user provided cannot be found
      /// 
      /// Locales: en, it
      static let kUserLoggedFailMessage = Rswift.StringResource(key: "kUserLoggedFailMessage", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "it"], comment: nil)
      /// en translation: You left one or more fields empty
      /// 
      /// Locales: en, it
      static let kAlertLoginFailedEmptyLabelsMessage = Rswift.StringResource(key: "kAlertLoginFailedEmptyLabelsMessage", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "it"], comment: nil)
      /// en translation: Your email is invalid
      /// 
      /// Locales: en, it
      static let kAlertLoginFailedInvalidEmailMessage = Rswift.StringResource(key: "kAlertLoginFailedInvalidEmailMessage", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "it"], comment: nil)
      
      /// en translation: Already signed? Login
      /// 
      /// Locales: en, it
      static func kSignupGoToLogin(_: Void = ()) -> String {
        return NSLocalizedString("kSignupGoToLogin", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Create your account
      /// 
      /// Locales: en, it
      static func kLoginGoToSignup(_: Void = ()) -> String {
        return NSLocalizedString("kLoginGoToSignup", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Different passwords
      /// 
      /// Locales: en, it
      static func kAlertLoginFailedDifferentPasswordsTitle(_: Void = ()) -> String {
        return NSLocalizedString("kAlertLoginFailedDifferentPasswordsTitle", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Email
      /// 
      /// Locales: en, it
      static func kLoginEmail(_: Void = ()) -> String {
        return NSLocalizedString("kLoginEmail", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Empty fields
      /// 
      /// Locales: en, it
      static func kAlertLoginFailedEmptyLabelsTitle(_: Void = ()) -> String {
        return NSLocalizedString("kAlertLoginFailedEmptyLabelsTitle", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Error
      /// 
      /// Locales: en, it
      static func kErorr(_: Void = ()) -> String {
        return NSLocalizedString("kErorr", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Invalid mail
      /// 
      /// Locales: en, it
      static func kAlertLoginFailedInvalidEmailTitle(_: Void = ()) -> String {
        return NSLocalizedString("kAlertLoginFailedInvalidEmailTitle", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Invalid password
      /// 
      /// Locales: en, it
      static func kAlertLoginFailedInvalidPasswordTitle(_: Void = ()) -> String {
        return NSLocalizedString("kAlertLoginFailedInvalidPasswordTitle", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Login
      /// 
      /// Locales: en, it
      static func kLoginButton(_: Void = ()) -> String {
        return NSLocalizedString("kLoginButton", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Login
      /// 
      /// Locales: en, it
      static func kLoginTitle(_: Void = ()) -> String {
        return NSLocalizedString("kLoginTitle", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Ok
      /// 
      /// Locales: en, it
      static func kAlertOkButton(_: Void = ()) -> String {
        return NSLocalizedString("kAlertOkButton", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Oppsss
      /// 
      /// Locales: en, it
      static func kUserLoggedFailTitle(_: Void = ()) -> String {
        return NSLocalizedString("kUserLoggedFailTitle", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Password
      /// 
      /// Locales: en, it
      static func kLoginPassword(_: Void = ()) -> String {
        return NSLocalizedString("kLoginPassword", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Password must be six characters long
      /// 
      /// Locales: en, it
      static func kAlertLoginFailedInvalidPasswordMessage(_: Void = ()) -> String {
        return NSLocalizedString("kAlertLoginFailedInvalidPasswordMessage", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Repeat password
      /// 
      /// Locales: en, it
      static func kSignupRepeatPassword(_: Void = ()) -> String {
        return NSLocalizedString("kSignupRepeatPassword", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Signup
      /// 
      /// Locales: en, it
      static func kSignupButton(_: Void = ()) -> String {
        return NSLocalizedString("kSignupButton", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Signup
      /// 
      /// Locales: en, it
      static func kSignupTitle(_: Void = ()) -> String {
        return NSLocalizedString("kSignupTitle", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: The confirmation password is different
      /// 
      /// Locales: en, it
      static func kAlertLoginFailedDifferentPasswordsMessage(_: Void = ()) -> String {
        return NSLocalizedString("kAlertLoginFailedDifferentPasswordsMessage", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: The user provided cannot be found
      /// 
      /// Locales: en, it
      static func kUserLoggedFailMessage(_: Void = ()) -> String {
        return NSLocalizedString("kUserLoggedFailMessage", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: You left one or more fields empty
      /// 
      /// Locales: en, it
      static func kAlertLoginFailedEmptyLabelsMessage(_: Void = ()) -> String {
        return NSLocalizedString("kAlertLoginFailedEmptyLabelsMessage", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Your email is invalid
      /// 
      /// Locales: en, it
      static func kAlertLoginFailedInvalidEmailMessage(_: Void = ()) -> String {
        return NSLocalizedString("kAlertLoginFailedInvalidEmailMessage", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try main.validate()
      try loadingInfo.validate()
      try launchScreen.validate()
      try login.validate()
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct loadingInfo: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = LoadingInfoController
      
      let bundle = R.hostingBundle
      let name = "LoadingInfo"
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct login: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = SignUpController
      
      let bundle = R.hostingBundle
      let login = StoryboardViewControllerResource<SignUpController>(identifier: "Login")
      let name = "Login"
      
      func login(_: Void = ()) -> SignUpController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: login)
      }
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.login().login() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'login' could not be loaded from storyboard 'Login' as 'SignUpController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController
      
      let bundle = R.hostingBundle
      let main = StoryboardViewControllerResource<UIKit.UINavigationController>(identifier: "Main")
      let name = "Main"
      
      func main(_: Void = ()) -> UIKit.UINavigationController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: main)
      }
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.main().main() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'main' could not be loaded from storyboard 'Main' as 'UIKit.UINavigationController'.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
